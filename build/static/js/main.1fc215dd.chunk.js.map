{"version":3,"sources":["assets/images/me.png","Header.js","Nav.js","Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","data-scroll","Component","Nav","data-fixed-element","src","Me","alt","width","Portfolio","props","state","shots","fetch","url","crossDomain","method","headers","then","response","json","responseJson","setState","console","log","id","this","map","shot","class","target","html_url","title","images","hidpi","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,gC,wMCyB5BC,G,kKAvBb,WACE,OACE,6BAASC,UAAU,gIACjB,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,gDACb,yBAAKA,UAAU,uEACb,wBAAIA,UAAU,6BAA4B,0BAAMA,UAAU,YAAhB,wBAA1C,iBACA,uBAAGA,UAAU,sDAAb,8DACA,uBAAGA,UAAU,uEAAuEC,KAAK,SAASC,cAAY,IAC5G,0BAAMF,UAAU,+DACd,uBAAGA,UAAU,sCAEf,0BAAMA,UAAU,6BAAhB,4B,GAdGG,c,gBCoBNC,E,4JAjBX,WACI,OACI,4BAAQJ,UAAU,4EAA4EK,qBAAmB,IAC7G,yBAAKL,UAAU,aACX,uBAAGA,UAAU,eAAeC,KAAK,cAC7B,yBAAKD,UAAU,yCAAyCM,IAAKC,IAAIC,IAAI,SAASC,MAAM,SAExF,wBAAIT,UAAU,cACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,qB,GAVVE,aCqCHO,G,wDArCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,IAHI,E,qDAOnB,WAAqB,IAAD,OAKhBC,MAAMC,uHAAmB,CACrBC,aAAa,EACbC,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAC5BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACxBF,MAAK,SAAAG,GACF,EAAKC,SAAS,CAAEV,MAAOS,IACvBE,QAAQC,IAAIH,Q,oBAGxB,WACI,OACI,yBAAKI,GAAG,SAEAC,KAAKf,MAAMC,MAAMe,KAAI,SAAAC,GACjB,OACI,uBAAGC,MAAM,OAAOC,OAAO,SAAS9B,KAAM4B,EAAKG,SAAUC,MAAOJ,EAAKI,OAAO,yBAAKH,MAAM,SAASD,EAAKI,OAAY,yBAAK3B,IAAKuB,EAAKK,OAAOC,iB,GA7BvIhC,cCgBTiC,E,4JAXb,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUG,aCKEkC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,MCVRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnB7B,MAAK,SAAA8B,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACH5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.1fc215dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.cb5565dc.png\";","import React, { Component } from \"react\";\nclass Header extends Component {\n  render() {\n    return (\n      <section className=\"d-flex align-items-center position-relative bg-dark bg-size-cover bg-position-center min-vh-100 overflow-hidden pt-6 pb-lg-5\">\n        <div className=\"container pt-4 pb-5 py-lg-5\">\n          <div className=\"row align-items-center py-3\">\n            <div className=\"col-xl-6 col-lg-5 d-flex justify-content-end\">\n              <div className=\"pt-2 mx-auto mb-5 mb-lg-0 ms-lg-0 me-xl-7 text-center text-lg-start\">\n                <h1 className=\"display-4 text-light pb-2\"><span className=\"fw-light\">Hi ðŸ‘‹ I'm </span>Emily Stanek!</h1>\n                <p className=\"h4 fw-light text-light opacity-70 line-height-base\">I'm a full stack developer with a specialization in UX/UI.</p>\n                <a className=\"d-inline-flex align-items-center text-decoration-none pt-2 mt-4 mb-5\" href=\"#demos\" data-scroll=\"\">\n                  <span className=\"btn btn-icon rounded-circle border-light flex-shrink-0 px-3\">\n                    <i className=\"ai-arrow-down h4 text-light my-1\"></i>\n                  </span>\n                  <span className=\"ms-3 text-light fw-medium\">View Portfolio</span></a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default Header","import React, { Component } from \"react\";\nimport Me from './assets/images/me.png';\n\nclass Nav extends Component {\n    render() {\n        return (\n            <header className=\"navbar bg-dark navbar-expand-md navbar-floating navbar-sticky navbar-dark\" data-fixed-element=\"\">\n                <div className=\"container\">\n                    <a className=\"navbar-brand\" href=\"index.html\">\n                        <img className=\"navbar-floating-logo d-none d-lg-block\" src={Me} alt=\"Around\" width=\"100\" />\n                    </a>\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Portfolio</a>\n                        </li>\n                    </ul>\n                </div>\n            </header>\n        )\n    }\n}\nexport default Nav","import React, { Component } from \"react\";\nimport './assets/stylesheets/portfolio.scss';\nclass Portfolio extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            shots: []\n        }\n    }\n\n    componentDidMount() {\n        // Set the Access Token\n        var accessToken = '7cf6c6076e0bb7cf08bb13a2ed8b0bacb4cfa28cd418498c3a68b2584c555ac2';\n        var url = \"https://api.dribbble.com/v2/user/shots?access_token=\"\n        // Call Dribble v2 API\n        fetch(url + accessToken, {\n            crossDomain: true,\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        }).then(response => response.json())\n            .then(responseJson => {\n                this.setState({ shots: responseJson });\n                console.log(responseJson);\n            });\n    }\n    render() {\n        return (\n            <div id=\"shots\">\n                {\n                    this.state.shots.map(shot => {\n                        return (\n                            <a class=\"shot\" target=\"_blank\" href={shot.html_url} title={shot.title}><div class=\"title\">{shot.title}</div><img src={shot.images.hidpi} /></a>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Portfolio","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport Header from \"./Header\";\nimport Nav from \"./Nav\";\nimport Portfolio from \"./Portfolio\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav/>\n        <Header />\n        <Portfolio />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: {\n                'Service-Worker': 'script'\n            },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}